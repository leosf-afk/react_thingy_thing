-Changing state has to always be done by setting the state to a new object.
-The useState function (as well as the useEffect function introduced later on in the course) must not be called from inside of a loop, a conditional expression, or any place that is not a function defining a component. This must be done to ensure that the hooks are always called in the same order, and if this isn't the case the application will behave erratically.
-Do Not Define Components Within Components
-setNotes(notes.concat(noteObject))
The method does not mutate the original notes array, but rather creates a new copy of the array with the new item added to the end. This is important since we must never mutate state directly in React!
-npm run server !!!!!!

npx create-react-app app-name

async -> function that return a promise
await -> makes js wait until promise settles and returns its result

npx create-react-app app-name

#back
npm install express --save
npm install --save-dev nodemon
npm install sequelize --save
npm install sqlite3
npm install cors

#front
npm install axios --save
npm install --save react-router-dom
npm install --save redux react-redux
npm install redux-thunk
npm install redux-devtools-extension --save
npm install --save styled-components

--
const notes = await Note.find({})
console.log('operation returned the following notes', notes)
The code looks exactly like synchronous code. The execution of code pauses at const notes = await Note.find({}) and waits until the related promise is fulfilled, and then continues its execution to the next line. When the execution continues, the result of the operation that returned a promise is assigned to the notes variable.
--

One more warning: If you notice you are mixing async/await and then calls, it is 99% certain you are doing something wrong. Use either or, never both. 


id 
importancia 
estimacion inicial
como probarlo 
notas

https://drive.google.com/drive/folders/1RZkz8OG3W-UvnEdEgmFk1vW45Grue9MF?usp=sharing

Array spread syntax
Because we now have quite good tests for the reducer, we can refactor the code safely.
Adding a new note creates the state it returns with Arrays concat-function. Let's take a look at how we can achieve the same by using the JavaScript array spread -syntax:

const noteReducer = (state = [], action) => {
  switch(action.type) {
    case 'NEW_NOTE':
      return [...state, action.data]
    case 'TOGGLE_IMPORTANCE':
      // ...
    default:
    return state
  }
}

en action van los datos nuevos, se agregan a state

calcular story points totales en la semana


para semana que viene

ya armado 
backlog completo
por cada user stories, todas las tareas con su tiempo estimado en sp u en horas (esta en el libro como se calculan y como se describe una tares)

user stories 
puntos de historia
tareas
ver en libro como describir una task

the state of the application is a single js object
everytime you want to change the state, you have to dispatcha an action, action describe the change
reducer takes state pass to a PURE function and return the new state of the application
previous state -> action -> next state

reducer: 
conter = (state, action) => {
	//si estado indefinido devuelve estado inicial
	if(typeof state === "undefined"){
		return 0;
	}

	//actions
	if(action.type === "INCREMENT"){
		return state+1
	} else if (action.type === "DECREMENT"){
		return state-1 
	} else {
		//si action desconocido devuelve el estado actua
		return state;
	}
}

//teoria:

mapStateToProps => post
mapDispatchToProps => get


cliente no se si iria
el problema si no se agrega cliente es que queda sin normalizar
las tasks no se si van
filtros por  ahora no

hay que tener en cuenta que un primer abm ""base"" va tomar mas tiempo que los otros, casi el triple diria yo 


sprint backlog: seleccion de tareas del backlog
sprint planning: duracion fija, no pasar de eso -> ver agenda pag 21

sprint 1: home abm base producto

en backlog sprint se puede cambiar las prioridades, se puede dividir tambien

EL CLIENTE DICE CUANDO ESTA TERMINADO


const baseComponent => (props){
	switch(props.type){
		case "ALTA":
			return (campos vacios)
		case "BAJA":
			return (campos cargados, sin permitir edicion)
		case "MODIFICACION":
			return (campons cargados)
	}
}

SELECT one, x, two
        FROM (((tickets 
        	INNER JOIN matches ON tickets.MatchId = matches.id 
        	INNER JOIN people ON tickets.PersonId = People.id 
        	INNER JOIN odds ON tickets.MatchId = odds.MatchId
        ))) WHERE Tickets.id = "18c8a614-466f-4769-bfd9-2c0409cac8ef"

separar vistas de implementacion

<Switch>
  <Route style={navBarSide} path="/matches">
    <ViewMatches />
  </Route>
  <Route style={navBarSide} path="/tickets">
    <ViewTickets />
  </Route>
  <Route path="/balance">
    <Balance />
  </Route>
</Switch>


svg,
alternativa para css